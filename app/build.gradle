//Load API Key information in from property file
Properties props = new Properties()
try {
    props.load(file('secret.properties').newDataInputStream())
} catch (Exception ex) {
    throw new GradleException("Missing secret.properties, check the secret.properties.sample file.", ex)
}

apply plugin: 'com.android.application'
apply plugin: 'deploygate'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.ben-manes.versions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "net.yusukezzz.ssmtc"
        minSdkVersion 29
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        buildConfigField "String", "CONSUMER_KEY", "\"${props['twitterConsumerKey']}\""
        buildConfigField "String", "CONSUMER_SECRET", "\"${props['twitterConsumerSecret']}\""
        buildConfigField "String", "MY_API_BASE_URL", "\"${props['myApiBaseUrl']}\""
        buildConfigField "String", "SLACK_TOKEN", "\"${props['slackToken']}\""
        buildConfigField "String", "SLACK_CHANNEL", "\"${props['slackChannel']}\""
    }
    signingConfigs {
        release {
            keyAlias props['keyAlias']
            keyPassword props['keyPassword']
            storeFile file(props['storeFile'])
            storePassword props['storePassword']
        }
    }
    buildTypes {
        release {
            debuggable false
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        debug.java.srcDirs += 'src/debug/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    androidExtensions {
        experimental = true
    }
}

configurations.all {
    exclude group: 'com.android.support', module: 'support-v13'
}
dependencies {
    ext {
        kotlin_coroutines_version = '1.3.9'
        support_version = '28.0.0'
        lifecycle_version = '2.2.0'
        retrofit_version = '2.9.0'
        okhttp_version = '4.9.0'
        permission_dispatcher_version = '4.8.0'
        dagger_version = '2.29.1'
        leakcanary_version = '2.4'
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation "androidx.activity:activity-ktx:1.2.0-alpha08"
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.exifinterface:exifinterface:1.3.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.browser:browser:1.2.0"
    implementation "androidx.drawerlayout:drawerlayout:1.1.1"
    implementation "androidx.viewpager:viewpager:1.0.0"
    implementation "com.google.android.material:material:1.2.1"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kaptTest "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    implementation "org.permissionsdispatcher:permissionsdispatcher:$permission_dispatcher_version"
    kapt "org.permissionsdispatcher:permissionsdispatcher-processor:$permission_dispatcher_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.4'
    testImplementation('org.threeten:threetenbp:1.4.4') {
        exclude group: 'com.jakewharton.threetenabp', module: 'threetenabp'
    }
    implementation 'se.akerfeldt:okhttp-signpost:1.1.0'

    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'saschpe.android:customtabs:3.0.2'
    implementation 'com.deploygate:sdk:4.3.0'
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:3.5.11'
    testImplementation 'org.robolectric:robolectric:4.4'
}

// ignore unstable releases
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'eap'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
task depupd(dependsOn: dependencyUpdates)

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def time = "\nTest time: ${(result.endTime - result.startTime) / 1000} secs\n"
                def output = "${time}\nResults: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)\n"
                println(output)
            }
        }
    }
}
